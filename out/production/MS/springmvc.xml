<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd ">
       
       <!-- 注解扫描 -->
       <context:component-scan base-package="com.tw.controller"></context:component-scan>
       <context:component-scan base-package="com.tw.advice"></context:component-scan>
       <context:component-scan base-package="com.tw.annotation"></context:component-scan>

	<!--开启aop对类的代理-->
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
	<!--	开启shiro注解支持-->
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

<!-- 能支持springmvc更高级的一些功能，JSR303校验，快捷的ajax...映射动态请求,其作用相当于handlerMappering和handlerAdapter -->
	   <mvc:annotation-driven></mvc:annotation-driven>
	 
	 <!-- 视图解析器配置 -->  
     <bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/page/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- <mvc:resources location="/resources/js/" mapping="/resources/js/**"></mvc:resources>
	<mvc:resources location="/resources/css/" mapping="/resources/css/**"></mvc:resources>
	<mvc:resources location="/resources/images/" mapping="/resources/images/**"></mvc:resources>
	<mvc:resources location="/resources/files/" mapping="/resources/files/**"></mvc:resources>
	<mvc:resources location="/layui/views/component/" mapping="/layui/views/component/**"></mvc:resources> -->
	<mvc:resources location="/layui/layuiadmin/" mapping="/layui/layuiadmin/**"></mvc:resources>
	<mvc:resources location="/layui/views/" mapping="/layui/views/**"></mvc:resources>
	<mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>
       
     <!-- 文件上传 -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
      <property name="maxUploadSize" value="1048576" />
    </bean>

<!--	定义登录的异常处理器-->
	<bean class="com.tw.exception.StaffExceptionResolver" />

    <!-- 登录拦截器  后期加上权限验证 -->
   <mvc:interceptors>
	   <mvc:interceptor>
		   <mvc:mapping path="/Comment/InsertCommentInfo"/>
		   <bean class="com.tw.interceptor.NoticeInterceptor" />
	   </mvc:interceptor>
   </mvc:interceptors>

    <!-- 针对所有的HandlerMapping进行拦截-->
<!--    	<mvc:interceptor>-->
<!--    		<mvc:mapping path="/**"/>-->
<!--    		<mvc:exclude-mapping path="/layui/**"/>-->
<!--    		<mvc:exclude-mapping path="/resources/**"/>-->
<!--    		<mvc:exclude-mapping path="/login.jsp"/>-->
<!--    		<mvc:exclude-mapping path="/Login/login"/> -->
<!--    		&lt;!&ndash; 获取并验证验证码 &ndash;&gt;-->
<!--    		<mvc:exclude-mapping path="/getVerifyCode"/>-->
<!--    		<mvc:exclude-mapping path="/Login/checkVerifyCode"/>-->
<!--    		<mvc:exclude-mapping path="/Login/checkVerifyCode"/>-->
<!--    		<mvc:exclude-mapping path="/Login/ToIndex"/>-->
<!--    		<bean class="com.tw.interceptor.LoginInterceptor" />-->
<!--    	</mvc:interceptor>-->
<!--   	<mvc:interceptor>-->
<!--   	<mvc:mapping path="/onlineCount"/>-->
<!--   	<bean class="com.tw.interceptor.OnlineCountInterceptor" />-->
<!--   	</mvc:interceptor>-->
   	
   	<!-- 这里的拦截器用来拦截一些敏感操作，用来进行权限验证，其他功能的拦截器与此类似。
   	对于敏感操作如果成功之后的话需要被记录到数据库中以实现持久化，方便运维人员维护 -->
   	<!-- <mvc:interceptor>
   	<bean class="com.tw.interceptor.StaffManegementInterceptor" />
   	</mvc:interceptor> -->
   	
   	

    <!-- 这样有什么影响？不过即使proxy-target-class设置为false，如果目标类没有声明接口，则Spring将自动使用CGLIB动态代理。 -->
  <aop:aspectj-autoproxy proxy-target-class="true" />
  <!-- 在这里配置的interceptor没有起作用，根据网上所查找的资料是因为和mvc:driven标签冲突了，以下为记录博客 https://blog.csdn.net/z3881006/article/details/78253935?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task -->
<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" >
	    <property name="interceptors">
		    <list>
		    	<bean class="com.tw.interceptor.LoginInterceptor"></bean>
		    </list>
	    </property>
    </bean> -->
</beans>
	